// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Refiz.Infrastructure;

#nullable disable

namespace Refiz.Infrastructure.Migrations
{
    [DbContext(typeof(RefizContext))]
    [Migration("20220706150803_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("Czech_CI_AS")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.ActivateEntity", b =>
                {
                    b.Property<int>("IdactivateEntity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDActivateEntity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdactivateEntity"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateExpired")
                        .HasColumnType("datetime");

                    b.Property<int>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.HasKey("IdactivateEntity");

                    b.HasIndex(new[] { "Code" }, "UK_ActivateEntities")
                        .IsUnique();

                    b.HasIndex(new[] { "Identity" }, "UL_ActivateEntities_Entity")
                        .IsUnique();

                    b.ToTable("ActivateEntity");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Cin")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("CIN");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("DateActivated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirmName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Idcountry")
                        .HasColumnType("int")
                        .HasColumnName("IDCountry");

                    b.Property<int?>("Idorganisation")
                        .HasColumnType("int")
                        .HasColumnName("IDOrganisation");

                    b.Property<int?>("Idregion")
                        .HasColumnType("int")
                        .HasColumnName("IDRegion");

                    b.Property<int>("Idrole")
                        .HasColumnType("int")
                        .HasColumnName("IDRole");

                    b.Property<bool>("IsFirm")
                        .HasColumnType("bit");

                    b.Property<string>("NameEntity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SurnameEntity")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Zip")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("Idcountry");

                    b.HasIndex("Idorganisation");

                    b.HasIndex("Idregion");

                    b.HasIndex("Idrole");

                    b.HasIndex(new[] { "Email" }, "UK_entities_email")
                        .IsUnique();

                    b.ToTable("entities", (string)null);
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.EntitySetting", b =>
                {
                    b.Property<int>("IdentitySetting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDEntitySetting");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdentitySetting"), 1L, 1);

                    b.Property<int>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Value")
                        .HasColumnType("xml");

                    b.HasKey("IdentitySetting");

                    b.HasIndex("Identity");

                    b.ToTable("EntitySetting");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.Role", b =>
                {
                    b.Property<int>("Idrole")
                        .HasColumnType("int")
                        .HasColumnName("IDRole");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Idrole");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.Group", b =>
                {
                    b.Property<int>("Idgroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDGroup");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idgroup"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte>("IndexOrder")
                        .HasColumnType("tinyint");

                    b.Property<string>("KeyResource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idgroup")
                        .HasName("pk_groups");

                    b.HasIndex(new[] { "Code" }, "uk_groups_code")
                        .IsUnique();

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.Photo", b =>
                {
                    b.Property<int>("Idphoto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPhoto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idphoto"), 1L, 1);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Idregister")
                        .HasColumnType("int")
                        .HasColumnName("IDRegister");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Idphoto");

                    b.HasIndex("Idregister");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.Register", b =>
                {
                    b.Property<int>("Idregister")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRegister");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idregister"), 1L, 1);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("DateChangeState")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("DateReg")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<int>("Idgroup")
                        .HasColumnType("int")
                        .HasColumnName("IDGroup");

                    b.Property<byte>("Idstate")
                        .HasColumnType("tinyint")
                        .HasColumnName("IDState");

                    b.Property<string>("NameSubject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int?>("RegNumber")
                        .HasColumnType("int");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Idregister");

                    b.HasIndex("Idgroup");

                    b.HasIndex(new[] { "Identity" }, "FK_registers_entities");

                    b.HasIndex(new[] { "Idstate" }, "FK_registers_states");

                    b.HasIndex(new[] { "Identity", "RegNumber" }, "UK_registers")
                        .IsUnique()
                        .HasFilter("[RegNumber] IS NOT NULL");

                    b.ToTable("registers", (string)null);
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.RegisterHistory", b =>
                {
                    b.Property<int>("IdregisterHistory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRegisterHistory");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdregisterHistory"), 1L, 1);

                    b.Property<long>("Idlog")
                        .HasColumnType("bigint")
                        .HasColumnName("IDLog");

                    b.Property<int>("Idregister")
                        .HasColumnType("int")
                        .HasColumnName("IDRegister");

                    b.HasKey("IdregisterHistory");

                    b.HasIndex("Idlog");

                    b.HasIndex("Idregister");

                    b.ToTable("RegisterHistory");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.State", b =>
                {
                    b.Property<byte>("Idstate")
                        .HasColumnType("tinyint")
                        .HasColumnName("IDState");

                    b.Property<string>("NameState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Idstate");

                    b.ToTable("states", (string)null);
                });

            modelBuilder.Entity("Refiz.Domain.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDCountry");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<byte>("IdLanguage")
                        .HasColumnType("tinyint")
                        .HasColumnName("IDLanguage");

                    b.HasKey("Id")
                        .HasName("PK_countries");

                    b.HasIndex("IdLanguage");

                    b.HasIndex(new[] { "CountryCode" }, "UK_countries")
                        .IsUnique();

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Refiz.Domain.Language", b =>
                {
                    b.Property<byte>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("IDLanguage");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<byte>("Id"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.HasKey("Id")
                        .HasName("pk_languages");

                    b.HasIndex(new[] { "Code" }, "uk_languages_code")
                        .IsUnique();

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Refiz.Domain.Log", b =>
                {
                    b.Property<long>("Idlog")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("IDLog");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Idlog"), 1L, 1);

                    b.Property<string>("Data")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<string>("Ip")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("IP");

                    b.Property<byte>("LogLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("Msg")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Idlog");

                    b.HasIndex("Identity");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("Refiz.Domain.NotifyRecipient", b =>
                {
                    b.Property<int>("IdnotifyRecipient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDNotifyRecipient");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdnotifyRecipient"), 1L, 1);

                    b.Property<bool>("AsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("AsSms")
                        .HasColumnType("bit");

                    b.Property<int>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<int>("IdnotifySource")
                        .HasColumnType("int")
                        .HasColumnName("IDNotifySource");

                    b.Property<DateTime?>("LastDateNotified")
                        .HasColumnType("datetime");

                    b.HasKey("IdnotifyRecipient");

                    b.HasIndex("Identity");

                    b.HasIndex(new[] { "IdnotifySource", "Identity" }, "UK_NotifyRecipients")
                        .IsUnique();

                    b.ToTable("NotifyRecipient");
                });

            modelBuilder.Entity("Refiz.Domain.NotifySource", b =>
                {
                    b.Property<int>("IdnotifySource")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDNotifySource");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdnotifySource"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdnotifySource");

                    b.HasIndex(new[] { "Name" }, "UK_NotifySources")
                        .IsUnique();

                    b.ToTable("NotifySource");
                });

            modelBuilder.Entity("Refiz.Domain.Organisation", b =>
                {
                    b.Property<int>("Idorganisation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDOrganisation");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idorganisation"), 1L, 1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowRestore")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateCreate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Idcountry")
                        .HasColumnType("int")
                        .HasColumnName("IDCountry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Phones")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("SecureKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("SwVersion")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<short>("TypeOrg")
                        .HasColumnType("smallint");

                    b.Property<bool>("WebApi")
                        .HasColumnType("bit");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Idorganisation");

                    b.HasIndex("Idcountry");

                    b.HasIndex(new[] { "Code" }, "UK_Organisations_Code")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UK_Organisations_Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Name" }, "UK_Organisations_Name")
                        .IsUnique();

                    b.ToTable("Organisation");
                });

            modelBuilder.Entity("Refiz.Domain.Preparation", b =>
                {
                    b.Property<int>("Idpreparation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDPreparation");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idpreparation"), 1L, 1);

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.Property<string>("DataSync")
                        .HasColumnType("xml");

                    b.Property<DateTime>("DateImport")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStateChange")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("GuidBatch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Idorganisation")
                        .HasColumnType("int")
                        .HasColumnName("IDOrganisation");

                    b.Property<int>("NrBatch")
                        .HasColumnType("int");

                    b.Property<short>("State")
                        .HasColumnType("smallint");

                    b.Property<int>("VersionXml")
                        .HasColumnType("int");

                    b.HasKey("Idpreparation");

                    b.HasIndex("Idorganisation");

                    b.HasIndex(new[] { "GuidBatch" }, "UK_Preparations_Guid")
                        .IsUnique();

                    b.ToTable("Preparation");
                });

            modelBuilder.Entity("Refiz.Domain.Region", b =>
                {
                    b.Property<int>("Idregion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IDRegion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Idregion"), 1L, 1);

                    b.Property<int>("Idcountry")
                        .HasColumnType("int")
                        .HasColumnName("IDCountry");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("Idregion")
                        .HasName("PK_regions");

                    b.HasIndex("Idcountry");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Refiz.Domain.Setting", b =>
                {
                    b.Property<byte?>("Idlanguage")
                        .HasColumnType("tinyint")
                        .HasColumnName("IDLanguage");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("Idlanguage");

                    b.HasIndex(new[] { "Key", "Idlanguage" }, "PK_settings")
                        .IsUnique()
                        .HasFilter("[IDLanguage] IS NOT NULL");

                    b.ToTable("settings", (string)null);
                });

            modelBuilder.Entity("Refiz.Domain.Views.WEntity", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(113)
                        .HasColumnType("nvarchar(113)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DateActivated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirmName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(301)
                        .HasColumnType("nvarchar(301)");

                    b.Property<int>("Idcountry")
                        .HasColumnType("int")
                        .HasColumnName("IDCountry");

                    b.Property<int>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<int?>("Idorganisation")
                        .HasColumnType("int")
                        .HasColumnName("IDOrganisation");

                    b.Property<int?>("Idregion")
                        .HasColumnType("int")
                        .HasColumnName("IDRegion");

                    b.Property<int>("Idrole")
                        .HasColumnType("int")
                        .HasColumnName("IDRole");

                    b.Property<bool>("IsFirm")
                        .HasColumnType("bit");

                    b.Property<string>("NameRole")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("OrganisationName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RegionName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.ToView("wEntities");
                });

            modelBuilder.Entity("Refiz.Domain.Views.WNotifyRecipient", b =>
                {
                    b.Property<bool>("AsEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("AsSms")
                        .HasColumnType("bit");

                    b.Property<bool>("EntityActive")
                        .HasColumnType("bit");

                    b.Property<string>("EntityEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<int>("IdnotifyRecipient")
                        .HasColumnType("int")
                        .HasColumnName("IDNotifyRecipient");

                    b.Property<int>("IdnotifySource")
                        .HasColumnType("int")
                        .HasColumnName("IDNotifySource");

                    b.Property<DateTime?>("LastDateNotified")
                        .HasColumnType("datetime");

                    b.Property<bool>("SourceActive")
                        .HasColumnType("bit");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("wNotifyRecipients");
                });

            modelBuilder.Entity("Refiz.Domain.Views.WPreparation", b =>
                {
                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("xml");

                    b.Property<string>("DataSync")
                        .HasColumnType("xml");

                    b.Property<DateTime>("DateImport")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateStateChange")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("GuidBatch")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Idorganisation")
                        .HasColumnType("int")
                        .HasColumnName("IDOrganisation");

                    b.Property<int>("Idpreparation")
                        .HasColumnType("int")
                        .HasColumnName("IDPreparation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("NrBatch")
                        .HasColumnType("int");

                    b.Property<short>("State")
                        .HasColumnType("smallint");

                    b.Property<short>("TypeOrg")
                        .HasColumnType("smallint");

                    b.Property<int>("VersionXml")
                        .HasColumnType("int");

                    b.ToView("wPreparations");
                });

            modelBuilder.Entity("Refiz.Domain.Views.WRegister", b =>
                {
                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(113)
                        .HasColumnType("nvarchar(113)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("DateChangeState")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateReg")
                        .HasColumnType("datetime");

                    b.Property<string>("Desc")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FirmName")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(301)
                        .HasColumnType("nvarchar(301)");

                    b.Property<bool>("GroupActive")
                        .HasColumnType("bit");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("GroupKeyResource")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Idcountry")
                        .HasColumnType("int")
                        .HasColumnName("IDCountry");

                    b.Property<int>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<int>("Idgroup")
                        .HasColumnType("int")
                        .HasColumnName("IDGroup");

                    b.Property<int?>("Idorganisation")
                        .HasColumnType("int")
                        .HasColumnName("IDOrganisation");

                    b.Property<int?>("Idphoto")
                        .HasColumnType("int")
                        .HasColumnName("IDPhoto");

                    b.Property<int?>("Idregion")
                        .HasColumnType("int")
                        .HasColumnName("IDRegion");

                    b.Property<int>("Idregister")
                        .HasColumnType("int")
                        .HasColumnName("IDRegister");

                    b.Property<byte>("Idstate")
                        .HasColumnType("tinyint")
                        .HasColumnName("IDState");

                    b.Property<string>("NameSubject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OrgName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RegNumber")
                        .HasColumnType("int");

                    b.Property<string>("RegionName")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short?>("TypeOrg")
                        .HasColumnType("smallint");

                    b.ToView("wRegisters");
                });

            modelBuilder.Entity("Refiz.Domain.Views.WRegisterHistory", b =>
                {
                    b.Property<string>("Data")
                        .HasMaxLength(3000)
                        .HasColumnType("nvarchar(3000)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime");

                    b.Property<string>("Event")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(301)
                        .HasColumnType("nvarchar(301)");

                    b.Property<string>("GroupCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("GroupResKey")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Identity")
                        .HasColumnType("int")
                        .HasColumnName("IDEntity");

                    b.Property<long>("Idlog")
                        .HasColumnType("bigint")
                        .HasColumnName("IDLog");

                    b.Property<int>("Idregister")
                        .HasColumnType("int")
                        .HasColumnName("IDRegister");

                    b.Property<int>("IdregisterHistory")
                        .HasColumnType("int")
                        .HasColumnName("IDRegisterHistory");

                    b.Property<int>("Idrole")
                        .HasColumnType("int")
                        .HasColumnName("IDRole");

                    b.Property<byte>("LogLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("Msg")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("NameSubject")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OrgName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("RegNumber")
                        .HasColumnType("int");

                    b.ToView("wRegisterHistories");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.ActivateEntity", b =>
                {
                    b.HasOne("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", "IdentityNavigation")
                        .WithOne("ActivateEntity")
                        .HasForeignKey("Refiz.Domain.AggregatesModel.EntityAggregate.ActivateEntity", "Identity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActivateEntities_entities");

                    b.Navigation("IdentityNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", b =>
                {
                    b.HasOne("Refiz.Domain.Country", "Country")
                        .WithMany("Entities")
                        .HasForeignKey("Idcountry")
                        .IsRequired()
                        .HasConstraintName("FK_entities_Countries");

                    b.HasOne("Refiz.Domain.Organisation", "Organisation")
                        .WithMany("Entities")
                        .HasForeignKey("Idorganisation")
                        .HasConstraintName("FK_entities_Organisations");

                    b.HasOne("Refiz.Domain.Region", "Region")
                        .WithMany("Entities")
                        .HasForeignKey("Idregion")
                        .HasConstraintName("FK_entities_Regions");

                    b.HasOne("Refiz.Domain.AggregatesModel.EntityAggregate.Role", "Role")
                        .WithMany("Entities")
                        .HasForeignKey("Idrole")
                        .IsRequired()
                        .HasConstraintName("FK_entities_roles");

                    b.Navigation("Country");

                    b.Navigation("Organisation");

                    b.Navigation("Region");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.EntitySetting", b =>
                {
                    b.HasOne("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", "IdentityNavigation")
                        .WithMany("EntitySettings")
                        .HasForeignKey("Identity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EntitySettings_entities");

                    b.Navigation("IdentityNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.Photo", b =>
                {
                    b.HasOne("Refiz.Domain.AggregatesModel.RegisterAggregate.Register", "IdregisterNavigation")
                        .WithMany("Photos")
                        .HasForeignKey("Idregister")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Photos_Register");

                    b.Navigation("IdregisterNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.Register", b =>
                {
                    b.HasOne("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", "IdentityNavigation")
                        .WithMany("Registers")
                        .HasForeignKey("Identity")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_registers_entities");

                    b.HasOne("Refiz.Domain.AggregatesModel.RegisterAggregate.Group", "IdgroupNavigation")
                        .WithMany("Registers")
                        .HasForeignKey("Idgroup")
                        .IsRequired()
                        .HasConstraintName("fk_registers_group");

                    b.HasOne("Refiz.Domain.AggregatesModel.RegisterAggregate.State", "IdstateNavigation")
                        .WithMany("Registers")
                        .HasForeignKey("Idstate")
                        .IsRequired()
                        .HasConstraintName("FK_registers_states");

                    b.Navigation("IdentityNavigation");

                    b.Navigation("IdgroupNavigation");

                    b.Navigation("IdstateNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.RegisterHistory", b =>
                {
                    b.HasOne("Refiz.Domain.Log", "IdlogNavigation")
                        .WithMany("RegisterHistories")
                        .HasForeignKey("Idlog")
                        .IsRequired()
                        .HasConstraintName("FK_RegisterHistories_Logs");

                    b.HasOne("Refiz.Domain.AggregatesModel.RegisterAggregate.Register", "IdregisterNavigation")
                        .WithMany("RegisterHistories")
                        .HasForeignKey("Idregister")
                        .IsRequired()
                        .HasConstraintName("FK_RegisterHistories_Registers");

                    b.Navigation("IdlogNavigation");

                    b.Navigation("IdregisterNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.Country", b =>
                {
                    b.HasOne("Refiz.Domain.Language", "IdlanguageNavigation")
                        .WithMany("Countries")
                        .HasForeignKey("IdLanguage")
                        .IsRequired()
                        .HasConstraintName("FK_countries_language");

                    b.Navigation("IdlanguageNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.Log", b =>
                {
                    b.HasOne("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", "IdentityNavigation")
                        .WithMany()
                        .HasForeignKey("Identity")
                        .HasConstraintName("FK_Logs_Entities");

                    b.Navigation("IdentityNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.NotifyRecipient", b =>
                {
                    b.HasOne("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", "IdentityNavigation")
                        .WithMany("NotifyRecipients")
                        .HasForeignKey("Identity")
                        .IsRequired()
                        .HasConstraintName("FK_NotifyRecipients_Entities");

                    b.HasOne("Refiz.Domain.NotifySource", "IdnotifySourceNavigation")
                        .WithMany("NotifyRecipients")
                        .HasForeignKey("IdnotifySource")
                        .IsRequired()
                        .HasConstraintName("FK_NotifyRecipients_NotifySources");

                    b.Navigation("IdentityNavigation");

                    b.Navigation("IdnotifySourceNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.Organisation", b =>
                {
                    b.HasOne("Refiz.Domain.Country", "IdcountryNavigation")
                        .WithMany("Organisations")
                        .HasForeignKey("Idcountry")
                        .IsRequired()
                        .HasConstraintName("FK_Organisations_Countries");

                    b.Navigation("IdcountryNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.Preparation", b =>
                {
                    b.HasOne("Refiz.Domain.Organisation", "IdorganisationNavigation")
                        .WithMany("Preparations")
                        .HasForeignKey("Idorganisation")
                        .IsRequired()
                        .HasConstraintName("FK_Preparations_Organisations");

                    b.Navigation("IdorganisationNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.Region", b =>
                {
                    b.HasOne("Refiz.Domain.Country", "IdcountryNavigation")
                        .WithMany("Regions")
                        .HasForeignKey("Idcountry")
                        .IsRequired()
                        .HasConstraintName("FK_Regions_Countries");

                    b.Navigation("IdcountryNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.Setting", b =>
                {
                    b.HasOne("Refiz.Domain.Language", "IdlanguageNavigation")
                        .WithMany()
                        .HasForeignKey("Idlanguage")
                        .HasConstraintName("fk_settings_language");

                    b.Navigation("IdlanguageNavigation");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.Entity", b =>
                {
                    b.Navigation("ActivateEntity")
                        .IsRequired();

                    b.Navigation("EntitySettings");

                    b.Navigation("NotifyRecipients");

                    b.Navigation("Registers");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.EntityAggregate.Role", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.Group", b =>
                {
                    b.Navigation("Registers");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.Register", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("RegisterHistories");
                });

            modelBuilder.Entity("Refiz.Domain.AggregatesModel.RegisterAggregate.State", b =>
                {
                    b.Navigation("Registers");
                });

            modelBuilder.Entity("Refiz.Domain.Country", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("Organisations");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Refiz.Domain.Language", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Refiz.Domain.Log", b =>
                {
                    b.Navigation("RegisterHistories");
                });

            modelBuilder.Entity("Refiz.Domain.NotifySource", b =>
                {
                    b.Navigation("NotifyRecipients");
                });

            modelBuilder.Entity("Refiz.Domain.Organisation", b =>
                {
                    b.Navigation("Entities");

                    b.Navigation("Preparations");
                });

            modelBuilder.Entity("Refiz.Domain.Region", b =>
                {
                    b.Navigation("Entities");
                });
#pragma warning restore 612, 618
        }
    }
}
